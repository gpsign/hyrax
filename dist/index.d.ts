import * as hooks from "./hooks";
import * as utils from "./utils";
import * as components from "./components";
import * as classes from "./classes";
export * from "./hooks";
export * from "./types";
export * from "./utils";
export * from "./components";
export * from "./dom";
export * from "./string";
export * from "./number";
export * from "./classes";
export { hx } from "./components";
declare const Hyrax: {
    percent(value: number, hundred?: number, zero?: number): number;
    map(x: number, inMin: number, inMax: number, outMin: number, outMax: number): number;
    clamp: import("./number").Clamp;
    toCamelCase(input: string): string;
    getCSSProperties(className: string): React.CSSProperties;
    getPropertySize(property: string): number;
    getCSSVar: import("./dom").GetCSSVar;
    Random: typeof classes.Random;
    StringBuilder: typeof classes.StringBuilder;
    Suspend: typeof classes.Suspend;
    ChildrenRefs: typeof classes.ChildrenRefs;
    Portal(props: components.PortalProps): string | number | bigint | boolean | Iterable<import("react").ReactNode> | Promise<string | number | bigint | boolean | import("react").ReactPortal | import("react").ReactElement<unknown, string | import("react").JSXElementConstructor<any>> | Iterable<import("react").ReactNode> | null | undefined> | import("react/jsx-runtime").JSX.Element | null | undefined;
    hx: components.HxType<"backgroundColor" | "bottom" | "color" | "display" | "height" | "left" | "opacity" | "position" | "right" | "textAlign" | "top" | "width" | "border" | "borderRadius" | "margin" | "padding">;
    BlurListener({ children, ignoreFocusRequirement, onBlur, }: components.BlurListenerProps): (string | number | bigint | Iterable<import("react").ReactNode> | Promise<string | number | bigint | boolean | import("react").ReactPortal | import("react").ReactElement<unknown, string | import("react").JSXElementConstructor<any>> | Iterable<import("react").ReactNode> | null | undefined> | import("react").ReactElement<unknown, string | import("react").JSXElementConstructor<any>>)[] | null | undefined;
    useUpdate(): hooks.UpdateHook;
    useAudioRecorder(): hooks.AudioRecorderHook;
    useInterval(handler: () => void, delay: number, config?: hooks.UseIntervalConfig & {
        stateless?: false;
    }): hooks.UseIntervalReturn;
    useInterval(handler: () => void, delay: number, config: hooks.UseIntervalConfig & {
        stateless: true;
    }): hooks.UseStatelessInterval;
    utils: {
        traceHierarchy<K extends PropertyKey, N extends utils.LinkLikeObject<K, N>>(obj: N, superior: K): N[];
        noop(..._values: unknown[]): void;
        alias<T extends object, D extends Partial<Record<keyof T, readonly string[]>>>(obj: T, dictionary: Readonly<D>): T & utils.AliasProperties<T, D>;
        isNumeric(value: unknown): value is utils.Numeric;
        length(value: unknown): number;
        nvl<T extends unknown[]>(...values: T): T[number] | null;
        fabricate: utils.Fabricate;
    };
    nvl<T extends unknown[]>(...values: T): T[number] | null;
    fabricate: utils.Fabricate;
    length(value: unknown): number;
    isNumeric(value: unknown): value is utils.Numeric;
    alias<T extends object, D extends Partial<Record<keyof T, readonly string[]>>>(obj: T, dictionary: Readonly<D>): T & utils.AliasProperties<T, D>;
    noop(..._values: unknown[]): void;
    traceHierarchy<K extends PropertyKey, N extends utils.LinkLikeObject<K, N>>(obj: N, superior: K): N[];
    health(): number;
};
export default Hyrax;
